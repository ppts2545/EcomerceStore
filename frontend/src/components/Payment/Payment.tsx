import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Payment.css';
import CartService from '../../services/CartService';
import AuthService, { type User } from '../../services/AuthService';

interface CartItem {
  id: number;
  productId: number;
  productName: string;
  productImage: string;
  price: number;
  quantity: number;
  stock: number;
  description?: string;
  totalPrice?: number;
}

interface PaymentMethod {
  id: string;
  name: string;
  icon: string;
  description?: string;
}

interface ShippingMethod {
  id: string;
  name: string;
  price: number;
  estimatedDays: string;
}

const Payment: React.FC = () => {
  const navigate = useNavigate();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('credit-card');
  const [selectedShipping, setSelectedShipping] = useState('standard');
  const [isProcessing, setIsProcessing] = useState(false);

  // Shipping Information
  const [shippingInfo, setShippingInfo] = useState({
    fullName: '',
    phone: '',
    address: '',
    city: '',
    postalCode: '',
    notes: ''
  });

  // Payment Methods
  const paymentMethods: PaymentMethod[] = [
    {
      id: 'credit-card',
      name: '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
      icon: 'üí≥',
      description: 'Visa, MasterCard, JCB'
    },
    {
      id: 'mobile-banking',
      name: 'Mobile Banking',
      icon: 'üì±',
      description: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£'
    },
    {
      id: 'promptpay',
      name: '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå',
      icon: 'üè¶',
      description: 'QR Code ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
    },
    {
      id: 'wallet',
      name: 'TrueMoney Wallet',
      icon: 'üëõ',
      description: '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå'
    },
    {
      id: 'cod',
      name: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
      icon: 'üöö',
      description: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
    }
  ];

  // Shipping Methods
  const shippingMethods: ShippingMethod[] = [
    {
      id: 'standard',
      name: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤',
      price: 50,
      estimatedDays: '3-5 ‡∏ß‡∏±‡∏ô'
    },
    {
      id: 'express',
      name: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô',
      price: 100,
      estimatedDays: '1-2 ‡∏ß‡∏±‡∏ô'
    },
    {
      id: 'same-day',
      name: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      price: 200,
      estimatedDays: '‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô'
    }
  ];

  useEffect(() => {
    loadPaymentData();
  }, []);

  const loadPaymentData = async () => {
    try {
      const [currentUser, items] = await Promise.all([
        AuthService.getCurrentUser(),
        CartService.getCartItems()
      ]);

      setUser(currentUser);
      setCartItems(items);

      // Pre-fill user info if available
      if (currentUser) {
        setShippingInfo(prev => ({
          ...prev,
          fullName: `${currentUser.firstName} ${currentUser.lastName}`.trim(),
        }));
      }
    } catch (error) {
      console.error('Error loading payment data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setShippingInfo(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const getTotalItems = () => cartItems.reduce((sum, item) => sum + item.quantity, 0);
  
  const getSubtotal = () => cartItems.reduce((sum, item) => sum + (item.price * item.quantity * 35), 0);
  
  const getShippingCost = () => {
    const method = shippingMethods.find(m => m.id === selectedShipping);
    return method ? method.price : 0;
  };
  
  const getTotalPrice = () => getSubtotal() + getShippingCost();

  const validateForm = () => {
    const required = ['fullName', 'phone', 'address', 'city', 'postalCode'];
    return required.every(field => shippingInfo[field as keyof typeof shippingInfo].trim() !== '');
  };

  const handlePlaceOrder = async () => {
    if (!validateForm()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    setIsProcessing(true);
    
    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Clear cart after successful payment
      await CartService.clearCart();
      
      // Show success message and redirect
      alert('üéâ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      navigate('/order-success', { replace: true });
    } catch (error) {
      console.error('Payment error:', error);
      alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setIsProcessing(false);
    }
  };

  if (!user) {
    return (
      <div className="payment-container">
        <div className="payment-content">
          <div className="payment-error">
            <h2>‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
            <p>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
            <button className="btn btn-primary" onClick={() => navigate('/')}>
              ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="payment-container">
        <div className="payment-loading">
          <div className="spinner"></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      </div>
    );
  }

  if (cartItems.length === 0) {
    return (
      <div className="payment-container">
        <div className="payment-content">
          <div className="payment-error">
            <h2>üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á</h2>
            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            <button className="btn btn-primary" onClick={() => navigate('/')}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="payment-container">
      <div className="payment-header">
        <button className="back-button" onClick={() => navigate('/')}>
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
        </button>
        <h1>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
      </div>

      <div className="payment-content">
        <div className="payment-left">
          {/* Shipping Information */}
          <div className="payment-section">
            <h3>üìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
            <div className="shipping-form">
              <div className="form-row">
                <div className="form-group">
                  <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                  <input
                    type="text"
                    name="fullName"
                    value={shippingInfo.fullName}
                    onChange={handleInputChange}
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
                  <input
                    type="tel"
                    name="phone"
                    value={shippingInfo.phone}
                    onChange={handleInputChange}
                    placeholder="0xx-xxx-xxxx"
                    required
                  />
                </div>
              </div>
              
              <div className="form-group">
                <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *</label>
                <input
                  type="text"
                  name="address"
                  value={shippingInfo.address}
                  onChange={handleInputChange}
                  placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ã‡∏≠‡∏¢ ‡∏ñ‡∏ô‡∏ô ‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•"
                  required
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</label>
                  <input
                    type="text"
                    name="city"
                    value={shippingInfo.city}
                    onChange={handleInputChange}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå *</label>
                  <input
                    type="text"
                    name="postalCode"
                    value={shippingInfo.postalCode}
                    onChange={handleInputChange}
                    placeholder="xxxxx"
                    maxLength={5}
                    required
                  />
                </div>
              </div>

              <div className="form-group">
                <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                <textarea
                  name="notes"
                  value={shippingInfo.notes}
                  onChange={handleInputChange}
                  placeholder="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á..."
                  rows={3}
                />
              </div>
            </div>
          </div>

          {/* Shipping Methods */}
          <div className="payment-section">
            <h3>üöö ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
            <div className="shipping-methods">
              {shippingMethods.map(method => (
                <label key={method.id} className="shipping-method">
                  <input
                    type="radio"
                    name="shipping"
                    value={method.id}
                    checked={selectedShipping === method.id}
                    onChange={(e) => setSelectedShipping(e.target.value)}
                  />
                  <div className="method-info">
                    <div className="method-name">{method.name}</div>
                    <div className="method-details">
                      {method.estimatedDays} ‚Ä¢ ‡∏ø{method.price}
                    </div>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Payment Methods */}
          <div className="payment-section">
            <h3>üí≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            <div className="payment-methods">
              {paymentMethods.map(method => (
                <label key={method.id} className="payment-method">
                  <input
                    type="radio"
                    name="payment"
                    value={method.id}
                    checked={selectedPaymentMethod === method.id}
                    onChange={(e) => setSelectedPaymentMethod(e.target.value)}
                  />
                  <div className="method-icon">{method.icon}</div>
                  <div className="method-info">
                    <div className="method-name">{method.name}</div>
                    {method.description && (
                      <div className="method-description">{method.description}</div>
                    )}
                  </div>
                </label>
              ))}
            </div>
          </div>
        </div>

        {/* Order Summary */}
        <div className="payment-right">
          <div className="order-summary">
            <h3>üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
            
            {/* Items */}
            <div className="order-items">
              {cartItems.map(item => (
                <div key={item.id} className="order-item">
                  <img src={item.productImage} alt={item.productName} />
                  <div className="item-details">
                    <div className="item-name">{item.productName}</div>
                    <div className="item-quantity">x{item.quantity}</div>
                  </div>
                  <div className="item-price">
                    ‡∏ø{(item.price * item.quantity * 35).toLocaleString()}
                  </div>
                </div>
              ))}
            </div>

            {/* Summary */}
            <div className="order-totals">
              <div className="total-row">
                <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({getTotalItems()} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
                <span>‡∏ø{getSubtotal().toLocaleString()}</span>
              </div>
              <div className="total-row">
                <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
                <span>‡∏ø{getShippingCost()}</span>
              </div>
              <div className="total-row total">
                <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                <span>‡∏ø{getTotalPrice().toLocaleString()}</span>
              </div>
            </div>

            {/* Place Order Button */}
            <button 
              className="place-order-btn"
              onClick={handlePlaceOrder}
              disabled={isProcessing || !validateForm()}
            >
              {isProcessing ? (
                <>
                  <div className="spinner-small"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...
                </>
              ) : (
                `‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ø${getTotalPrice().toLocaleString()}`
              )}
            </button>

            {/* Security Notice */}
            <div className="security-notice">
              <div className="security-icon">üîí</div>
              <div>
                <div className="security-title">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</div>
                <div className="security-text">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö SSL
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;
