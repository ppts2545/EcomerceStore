package com.example.E_commerceStore.WebApp.controller;

import com.example.E_commerceStore.WebApp.model.*;
import com.example.E_commerceStore.WebApp.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/sample")
@CrossOrigin(origins = "http://localhost:5174")
public class SampleDataController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CommentRepository commentRepository;

    private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    @PostMapping("/create-reviews")
    public String createSampleReviews() {
        try {
            // Get existing products
            List<Product> products = productRepository.findAll();
            if (products.isEmpty()) {
                return "No products found. Please add some products first.";
            }

            // Create sample users if they don't exist
            User user1 = createSampleUser("reviewer1@example.com", "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡πÉ‡∏à‡∏î‡∏µ");
            User user2 = createSampleUser("reviewer2@example.com", "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", "‡∏£‡∏±‡∏Å‡∏™‡∏ß‡∏¢");
            User user3 = createSampleUser("reviewer3@example.com", "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢", "‡∏™‡∏∏‡∏Ç‡πÉ‡∏™");

            // Create sample reviews for the first product
            Product firstProduct = products.get(0);
            
            // Create new sample reviews
            Comment comment1 = new Comment(user1, firstProduct, "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏¢!", 5);
            comment1.setCreatedAt(LocalDateTime.now().minusDays(5));
            commentRepository.save(comment1);

            Comment comment2 = new Comment(user2, firstProduct, "‡∏ú‡πâ‡∏≤‡∏ô‡∏¥‡πà‡∏°‡∏™‡∏ö‡∏≤‡∏¢ ‡πÉ‡∏™‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏ß‡∏¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å", 4);
            comment2.setCreatedAt(LocalDateTime.now().minusDays(3));
            commentRepository.save(comment2);

            Comment comment3 = new Comment(user3, firstProduct, "‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡πÅ‡∏ï‡πà‡∏™‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö", 4);
            comment3.setCreatedAt(LocalDateTime.now().minusDays(1));
            commentRepository.save(comment3);

            return "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: " + firstProduct.getName();
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: " + e.getMessage();
        }
    }

    private User createSampleUser(String email, String firstName, String lastName) {
        Optional<User> existingUser = userRepository.findByEmail(email);
        if (existingUser.isPresent()) {
            return existingUser.get();
        }

        User user = new User();
        user.setEmail(email);
        user.setPassword(passwordEncoder.encode("password123"));
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setRole(UserRole.CUSTOMER);
        user.setCreatedAt(LocalDateTime.now());
        
        return userRepository.save(user);
    }

    @DeleteMapping("/clear-reviews")
    public String clearSampleReviews() {
        try {
            // Delete all comments
            commentRepository.deleteAll();
            return "‚úÖ ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!";
        } catch (Exception e) {
            return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: " + e.getMessage();
        }
    }

    @GetMapping("/status")
    public String getStatus() {
        try {
            long productCount = productRepository.count();
            long commentCount = commentRepository.count();
            long userCount = userRepository.count();
            
            return String.format("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ %d ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß %d ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß, ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ %d ‡∏Ñ‡∏ô", 
                productCount, commentCount, userCount);
        } catch (Exception e) {
            return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: " + e.getMessage();
        }
    }
}
